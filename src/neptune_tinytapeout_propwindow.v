`default_nettype none
`timescale 1ns/1ps
/* Generated by Amaranth Yosys 0.25 (PyPI ver 0.25.0.0.post69, git sha1 e02b7f64b) */

module discriminator(rst, edge_count, note, match_exact, match_high, match_far, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$1  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$101 ;
  wire [4:0] \$12 ;
  wire [4:0] \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [3:0] \$19 ;
  wire [3:0] \$20 ;
  wire [3:0] \$22 ;
  wire [3:0] \$24 ;
  wire [3:0] \$26 ;
  wire [3:0] \$28 ;
  wire \$3 ;
  wire [3:0] \$30 ;
  wire [3:0] \$32 ;
  wire [3:0] \$34 ;
  wire [3:0] \$36 ;
  wire [3:0] \$38 ;
  wire [8:0] \$40 ;
  wire [8:0] \$42 ;
  wire [8:0] \$44 ;
  wire [8:0] \$46 ;
  wire [8:0] \$48 ;
  wire \$5 ;
  wire [8:0] \$50 ;
  wire [8:0] \$52 ;
  wire [8:0] \$54 ;
  wire [8:0] \$56 ;
  wire [8:0] \$58 ;
  wire [5:0] \$60 ;
  wire [5:0] \$62 ;
  wire [5:0] \$64 ;
  wire [5:0] \$66 ;
  wire [5:0] \$68 ;
  wire [5:0] \$7 ;
  wire [5:0] \$70 ;
  wire [5:0] \$72 ;
  wire [5:0] \$74 ;
  wire [5:0] \$76 ;
  wire [5:0] \$78 ;
  wire [5:0] \$8 ;
  wire \$80 ;
  wire [9:0] \$82 ;
  wire [9:0] \$83 ;
  wire \$85 ;
  wire [5:0] \$87 ;
  wire [6:0] \$89 ;
  wire \$91 ;
  wire [5:0] \$93 ;
  wire [6:0] \$95 ;
  wire \$97 ;
  wire [5:0] \$99 ;
  input clk;
  wire clk;
  reg [3:0] curNoteIndex = 4'h0;
  reg [3:0] \curNoteIndex$next ;
  (* enum_base_type = "DiscriminatorState" *)
  (* enum_value_000 = "PowerUp" *)
  (* enum_value_001 = "Init" *)
  (* enum_value_010 = "CalculateDiffFromTarget" *)
  (* enum_value_011 = "Compare" *)
  (* enum_value_100 = "MovedToNextCheckBounds" *)
  (* enum_value_101 = "DetectedValidNote" *)
  (* enum_value_110 = "DisplayResult" *)
  reg [2:0] curState = 3'h0;
  reg [2:0] \curState$next ;
  reg [5:0] detectionWindow = 6'h00;
  reg [5:0] \detectionWindow$next ;
  reg [5:0] detectionWindowMidPoint = 6'h00;
  reg [5:0] \detectionWindowMidPoint$next ;
  input [7:0] edge_count;
  wire [7:0] edge_count;
  reg inputFreqHigher = 1'h0;
  reg \inputFreqHigher$next ;
  output match_exact;
  reg match_exact = 1'h0;
  reg \match_exact$next ;
  output match_far;
  reg match_far = 1'h0;
  reg \match_far$next ;
  output match_high;
  reg match_high = 1'h0;
  reg \match_high$next ;
  reg [4:0] noMatchCount = 5'h00;
  reg [4:0] \noMatchCount$next ;
  output [3:0] note;
  reg [3:0] note = 4'h0;
  reg [3:0] \note$next ;
  reg [5:0] readingProximityResult = 6'h00;
  reg [5:0] \readingProximityResult$next ;
  input rst;
  wire rst;
  reg [8:0] subtractResult = 9'h000;
  reg [8:0] \subtractResult$next ;
  assign \$101  = readingProximityResult <= \$99 ;
  always @(posedge clk)
    curState <= \curState$next ;
  always @(posedge clk)
    noMatchCount <= \noMatchCount$next ;
  always @(posedge clk)
    curNoteIndex <= \curNoteIndex$next ;
  always @(posedge clk)
    note <= \note$next ;
  always @(posedge clk)
    subtractResult <= \subtractResult$next ;
  always @(posedge clk)
    detectionWindow <= \detectionWindow$next ;
  always @(posedge clk)
    detectionWindowMidPoint <= \detectionWindowMidPoint$next ;
  assign \$10  = subtractResult <= detectionWindow;
  always @(posedge clk)
    readingProximityResult <= \readingProximityResult$next ;
  always @(posedge clk)
    inputFreqHigher <= \inputFreqHigher$next ;
  always @(posedge clk)
    match_exact <= \match_exact$next ;
  always @(posedge clk)
    match_far <= \match_far$next ;
  always @(posedge clk)
    match_high <= \match_high$next ;
  assign \$13  = curNoteIndex + 1'h1;
  assign \$15  = noMatchCount == 5'h1f;
  assign \$17  = subtractResult <= detectionWindow;
  assign \$1  = subtractResult <= detectionWindow;
  assign \$3  = curNoteIndex < 4'ha;
  assign \$40  = 8'hd0 - edge_count;
  assign \$42  = 8'haf - edge_count;
  assign \$44  = 8'h9c - edge_count;
  assign \$46  = 8'h82 - edge_count;
  assign \$48  = 8'h74 - edge_count;
  assign \$50  = 8'h68 - edge_count;
  assign \$52  = 8'h57 - edge_count;
  assign \$54  = 8'h4d - edge_count;
  assign \$56  = 8'h3a - edge_count;
  assign \$58  = 8'h2b - edge_count;
  assign \$5  = curNoteIndex < 4'ha;
  assign \$80  = subtractResult <= detectionWindowMidPoint;
  assign \$83  = detectionWindow - subtractResult;
  assign \$85  = subtractResult <= detectionWindowMidPoint;
  assign \$8  = noMatchCount + 1'h1;
  assign \$89  = detectionWindowMidPoint - \$87 ;
  assign \$91  = readingProximityResult >= \$89 ;
  assign \$95  = detectionWindowMidPoint - \$93 ;
  assign \$97  = readingProximityResult >= \$95 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (curState)
      3'h0:
          \curState$next  = 3'h1;
      3'h1:
          \curState$next  = 3'h2;
      3'h2:
          \curState$next  = 3'h3;
      3'h3:
          (* full_case = 32'd1 *)
          casez (\$1 )
            1'h1:
                \curState$next  = 3'h5;
            default:
                \curState$next  = 3'h4;
          endcase
      3'h4:
          (* full_case = 32'd1 *)
          casez (\$3 )
            1'h1:
                \curState$next  = 3'h2;
            default:
                \curState$next  = 3'h1;
          endcase
      3'h5:
          \curState$next  = 3'h6;
      3'h6:
          \curState$next  = 3'h1;
      default:
          \curState$next  = 3'h0;
    endcase
    casez (rst)
      1'h1:
          \curState$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \noMatchCount$next  = noMatchCount;
    casez (curState)
      3'h0:
          \noMatchCount$next  = 5'h00;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          (* full_case = 32'd1 *)
          casez (\$5 )
            1'h1:
                /* empty */;
            default:
                \noMatchCount$next  = \$8 [4:0];
          endcase
      3'h5:
          \noMatchCount$next  = 5'h00;
    endcase
    casez (rst)
      1'h1:
          \noMatchCount$next  = 5'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \match_far$next  = match_far;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          (* full_case = 32'd1 *)
          casez (\$97 )
            1'h1:
                \match_far$next  = 1'h0;
            default:
                (* full_case = 32'd1 *)
                casez (\$101 )
                  1'h1:
                      \match_far$next  = 1'h1;
                  default:
                      \match_far$next  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \match_far$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \match_high$next  = match_high;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          \match_high$next  = inputFreqHigher;
    endcase
    casez (rst)
      1'h1:
          \match_high$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \curNoteIndex$next  = curNoteIndex;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          \curNoteIndex$next  = 4'h0;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          casez (\$10 )
            1'h1:
                /* empty */;
            default:
                \curNoteIndex$next  = \$13 [3:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \curNoteIndex$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \note$next  = note;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          casez (\$15 )
            1'h1:
                \note$next  = 4'h0;
          endcase
      3'h2:
          /* empty */;
      3'h3:
          casez (\$17 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (curNoteIndex)
                  4'h0:
                      \note$next  = \$20 ;
                  4'h1:
                      \note$next  = \$22 ;
                  4'h2:
                      \note$next  = \$24 ;
                  4'h3:
                      \note$next  = \$26 ;
                  4'h4:
                      \note$next  = \$28 ;
                  4'h5:
                      \note$next  = \$30 ;
                  4'h6:
                      \note$next  = \$32 ;
                  4'h7:
                      \note$next  = \$34 ;
                  4'h8:
                      \note$next  = \$36 ;
                  4'h?:
                      \note$next  = \$38 ;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \note$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \subtractResult$next  = subtractResult;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          casez (curNoteIndex)
            4'h0:
                \subtractResult$next  = \$40 ;
            4'h1:
                \subtractResult$next  = \$42 ;
            4'h2:
                \subtractResult$next  = \$44 ;
            4'h3:
                \subtractResult$next  = \$46 ;
            4'h4:
                \subtractResult$next  = \$48 ;
            4'h5:
                \subtractResult$next  = \$50 ;
            4'h6:
                \subtractResult$next  = \$52 ;
            4'h7:
                \subtractResult$next  = \$54 ;
            4'h8:
                \subtractResult$next  = \$56 ;
            4'h?:
                \subtractResult$next  = \$58 ;
          endcase
    endcase
    casez (rst)
      1'h1:
          \subtractResult$next  = 9'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \detectionWindow$next  = detectionWindow;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          casez (curNoteIndex)
            4'h0:
                \detectionWindow$next  = 6'h18;
            4'h1:
                \detectionWindow$next  = 6'h14;
            4'h2:
                \detectionWindow$next  = 6'h12;
            4'h3:
                \detectionWindow$next  = 6'h0f;
            4'h4:
                \detectionWindow$next  = 6'h0d;
            4'h5:
                \detectionWindow$next  = 6'h0c;
            4'h6:
                \detectionWindow$next  = 6'h0a;
            4'h7:
                \detectionWindow$next  = 6'h09;
            4'h8:
                \detectionWindow$next  = 6'h06;
            4'h?:
                \detectionWindow$next  = 6'h05;
          endcase
    endcase
    casez (rst)
      1'h1:
          \detectionWindow$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \detectionWindowMidPoint$next  = detectionWindowMidPoint;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          casez (curNoteIndex)
            4'h0:
                \detectionWindowMidPoint$next  = \$60 ;
            4'h1:
                \detectionWindowMidPoint$next  = \$62 ;
            4'h2:
                \detectionWindowMidPoint$next  = \$64 ;
            4'h3:
                \detectionWindowMidPoint$next  = \$66 ;
            4'h4:
                \detectionWindowMidPoint$next  = \$68 ;
            4'h5:
                \detectionWindowMidPoint$next  = \$70 ;
            4'h6:
                \detectionWindowMidPoint$next  = \$72 ;
            4'h7:
                \detectionWindowMidPoint$next  = \$74 ;
            4'h8:
                \detectionWindowMidPoint$next  = \$76 ;
            4'h?:
                \detectionWindowMidPoint$next  = \$78 ;
          endcase
    endcase
    casez (rst)
      1'h1:
          \detectionWindowMidPoint$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \readingProximityResult$next  = readingProximityResult;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          (* full_case = 32'd1 *)
          casez (\$80 )
            1'h1:
                \readingProximityResult$next  = subtractResult[5:0];
            default:
                \readingProximityResult$next  = \$83 [5:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \readingProximityResult$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \inputFreqHigher$next  = inputFreqHigher;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          (* full_case = 32'd1 *)
          casez (\$85 )
            1'h1:
                \inputFreqHigher$next  = 1'h1;
            default:
                \inputFreqHigher$next  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \inputFreqHigher$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \match_exact$next  = match_exact;
    casez (curState)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          (* full_case = 32'd1 *)
          casez (\$91 )
            1'h1:
                \match_exact$next  = 1'h1;
            default:
                \match_exact$next  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \match_exact$next  = 1'h0;
    endcase
  end
  assign \$7  = \$8 ;
  assign \$12  = \$13 ;
  assign \$82  = \$83 ;
  assign \$20  = 4'h1;
  assign \$22  = 4'h6;
  assign \$24  = 4'h5;
  assign \$26  = 4'h3;
  assign \$28  = 4'h2;
  assign \$30  = 4'h1;
  assign \$32  = 4'h6;
  assign \$34  = 4'h5;
  assign \$36  = 4'h2;
  assign \$38  = 4'h6;
  assign \$60  = 6'h0c;
  assign \$62  = 6'h0a;
  assign \$64  = 6'h09;
  assign \$66  = 6'h07;
  assign \$68  = 6'h06;
  assign \$70  = 6'h06;
  assign \$72  = 6'h05;
  assign \$74  = 6'h04;
  assign \$76  = 6'h03;
  assign \$78  = 6'h02;
  assign \$87  = { 4'h0, detectionWindow[5:4] };
  assign \$93  = { 4'h0, detectionWindow[5:4] };
  assign \$99  = { 1'h0, detectionWindowMidPoint[5:1] };
endmodule

module display(rst, valueNote, valueProxim, segments, proximitySelect, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$2  = 0;
  wire \$1 ;
  input clk;
  wire clk;
  wire [7:0] notedisplay_segments;
  reg [2:0] notedisplay_value = 3'h0;
  reg [2:0] \notedisplay_value$next ;
  wire [7:0] proxdisplay_segments;
  reg [2:0] proxdisplay_value = 3'h0;
  reg [2:0] \proxdisplay_value$next ;
  output proximitySelect;
  reg proximitySelect = 1'h0;
  reg \proximitySelect$next ;
  input rst;
  wire rst;
  output [7:0] segments;
  reg [7:0] segments = 8'h00;
  reg [7:0] \segments$next ;
  input [3:0] valueNote;
  wire [3:0] valueNote;
  input [2:0] valueProxim;
  wire [2:0] valueProxim;
  assign \$1  = ! valueNote;
  always @(posedge clk)
    notedisplay_value <= \notedisplay_value$next ;
  always @(posedge clk)
    proxdisplay_value <= \proxdisplay_value$next ;
  always @(posedge clk)
    proximitySelect <= \proximitySelect$next ;
  always @(posedge clk)
    segments <= \segments$next ;
  notedisplay notedisplay (
    .clk(clk),
    .rst(rst),
    .segments(notedisplay_segments),
    .value(notedisplay_value)
  );
  proxdisplay proxdisplay (
    .clk(clk),
    .rst(rst),
    .segments(proxdisplay_segments),
    .value(proxdisplay_value)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \notedisplay_value$next  = valueNote[2:0];
    casez (rst)
      1'h1:
          \notedisplay_value$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \proxdisplay_value$next  = valueProxim;
    casez (rst)
      1'h1:
          \proxdisplay_value$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \proximitySelect$next  = 1'h1;
    casez (proximitySelect)
      1'h1:
          \proximitySelect$next  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \proximitySelect$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    casez (proximitySelect)
      1'h1:
          (* full_case = 32'd1 *)
          casez (\$1 )
            1'h1:
                \segments$next  = notedisplay_segments;
            default:
                \segments$next  = proxdisplay_segments;
          endcase
      default:
          \segments$next  = notedisplay_segments;
    endcase
    casez (rst)
      1'h1:
          \segments$next  = 8'h00;
    endcase
  end
endmodule

module edge_detect(rst, \input , \output , clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$3  = 0;
  wire \$1 ;
  wire \$3 ;
  input clk;
  wire clk;
  wire ffsync_syncOut;
  input \input ;
  wire \input ;
  output \output ;
  reg \output  = 1'h0;
  reg \output$next ;
  input rst;
  wire rst;
  reg seenRising = 1'h0;
  reg \seenRising$next ;
  assign \$1  = ~ seenRising;
  assign \$3  = ~ seenRising;
  always @(posedge clk)
    \output  <= \output$next ;
  always @(posedge clk)
    seenRising <= \seenRising$next ;
  ffsync ffsync (
    .clk(clk),
    .\input (\input ),
    .rst(rst),
    .syncOut(ffsync_syncOut)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$3 ) begin end
    \output$next  = 1'h0;
    casez (ffsync_syncOut)
      1'h1:
          casez (\$1 )
            1'h1:
                \output$next  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \output$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$3 ) begin end
    \seenRising$next  = seenRising;
    (* full_case = 32'd1 *)
    casez (ffsync_syncOut)
      1'h1:
          casez (\$3 )
            1'h1:
                \seenRising$next  = 1'h1;
          endcase
      default:
          \seenRising$next  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \seenRising$next  = 1'h0;
    endcase
  end
endmodule

module ffsync(rst, \input , syncOut, clk);
  input clk;
  wire clk;
  input \input ;
  wire \input ;
  input rst;
  wire rst;
  reg stage0 = 1'h0;
  wire \stage0$next ;
  reg stage1 = 1'h0;
  wire \stage1$next ;
  output syncOut;
  wire syncOut;
  always @(posedge clk)
    stage0 <= \stage0$next ;
  always @(posedge clk)
    stage1 <= \stage1$next ;
  assign syncOut = stage1;
  assign \stage1$next  = stage0;
  assign \stage0$next  = \input ;
endmodule

module notedisplay(rst, value, segments, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$4  = 0;
  wire \$1 ;
  input clk;
  wire clk;
  input rst;
  wire rst;
  output [7:0] segments;
  reg [7:0] segments = 8'h00;
  reg [7:0] \segments$next ;
  input [2:0] value;
  wire [2:0] value;
  assign \$1  = value < 4'h8;
  always @(posedge clk)
    segments <= \segments$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$4 ) begin end
    \segments$next  = 8'h00;
    casez (\$1 )
      1'h1:
          (* full_case = 32'd1 *)
          casez (value)
            3'h0:
                \segments$next  = 8'h02;
            3'h1:
                \segments$next  = 8'hf6;
            3'h2:
                \segments$next  = 8'hee;
            3'h3:
                \segments$next  = 8'h3e;
            3'h4:
                \segments$next  = 8'h9c;
            3'h5:
                \segments$next  = 8'h7a;
            3'h6:
                \segments$next  = 8'h9e;
            3'h?:
                \segments$next  = 8'h8e;
          endcase
    endcase
    casez (rst)
      1'h1:
          \segments$next  = 8'h00;
    endcase
  end
endmodule

module proxdisplay(rst, value, segments, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$5  = 0;
  wire \$1 ;
  input clk;
  wire clk;
  input rst;
  wire rst;
  output [7:0] segments;
  reg [7:0] segments = 8'h00;
  reg [7:0] \segments$next ;
  input [2:0] value;
  wire [2:0] value;
  assign \$1  = value < 4'h8;
  always @(posedge clk)
    segments <= \segments$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$5 ) begin end
    \segments$next  = 8'h00;
    casez (\$1 )
      1'h1:
          (* full_case = 32'd1 *)
          casez (value)
            3'h0:
                \segments$next  = 8'h2a;
            3'h1:
                \segments$next  = 8'h01;
            3'h2:
                \segments$next  = 8'h46;
            3'h3:
                \segments$next  = 8'h01;
            3'h4:
                \segments$next  = 8'h38;
            3'h5:
                \segments$next  = 8'h01;
            3'h6:
                \segments$next  = 8'hc4;
            3'h?:
                \segments$next  = 8'h01;
          endcase
    endcase
    casez (rst)
      1'h1:
          \segments$next  = 8'h00;
    endcase
  end
endmodule

module pulsecounter(rst, \input , clock_config, pulseCount, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$6  = 0;
  wire [15:0] \$1 ;
  wire \$10 ;
  wire [15:0] \$12 ;
  wire [15:0] \$13 ;
  wire [15:0] \$2 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  input clk;
  wire clk;
  reg [14:0] clockCount = 15'h0000;
  reg [14:0] \clockCount$next ;
  input [2:0] clock_config;
  wire [2:0] clock_config;
  wire edge_detect_input;
  wire edge_detect_output;
  input \input ;
  wire \input ;
  output [14:0] pulseCount;
  reg [14:0] pulseCount = 15'h0000;
  reg [14:0] \pulseCount$next ;
  input rst;
  wire rst;
  reg [14:0] runningPulseCount = 15'h0000;
  reg [14:0] \runningPulseCount$next ;
  reg [14:0] singlePeriodClockCount = 15'h0000;
  reg [14:0] \singlePeriodClockCount$next ;
  assign \$10  = ! clockCount;
  assign \$13  = runningPulseCount + 1'h1;
  always @(posedge clk)
    clockCount <= \clockCount$next ;
  always @(posedge clk)
    singlePeriodClockCount <= \singlePeriodClockCount$next ;
  always @(posedge clk)
    pulseCount <= \pulseCount$next ;
  always @(posedge clk)
    runningPulseCount <= \runningPulseCount$next ;
  assign \$2  = clockCount + 1'h1;
  assign \$4  = clockCount == singlePeriodClockCount;
  assign \$6  = clockCount == singlePeriodClockCount;
  assign \$8  = clockCount == singlePeriodClockCount;
  edge_detect edge_detect (
    .clk(clk),
    .\input (edge_detect_input),
    .\output (edge_detect_output),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \clockCount$next  = \$2 [14:0];
    casez (\$4 )
      1'h1:
          \clockCount$next  = 15'h0000;
    endcase
    casez (rst)
      1'h1:
          \clockCount$next  = 15'h0000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \singlePeriodClockCount$next  = singlePeriodClockCount;
    casez (clock_config)
      3'h0:
          \singlePeriodClockCount$next  = 15'h01f4;
      3'h1:
          \singlePeriodClockCount$next  = 15'h03e8;
      3'h3:
          \singlePeriodClockCount$next  = 15'h0667;
      3'h2:
          \singlePeriodClockCount$next  = 15'h07d0;
    endcase
    casez (rst)
      1'h1:
          \singlePeriodClockCount$next  = 15'h0000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \pulseCount$next  = pulseCount;
    casez (\$6 )
      1'h1:
          \pulseCount$next  = runningPulseCount;
    endcase
    casez (rst)
      1'h1:
          \pulseCount$next  = 15'h0000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$6 ) begin end
    \runningPulseCount$next  = runningPulseCount;
    (* full_case = 32'd1 *)
    casez (\$8 )
      1'h1:
          /* empty */;
      default:
          (* full_case = 32'd1 *)
          casez (\$10 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (edge_detect_output)
                  1'h1:
                      \runningPulseCount$next  = 15'h0001;
                  default:
                      \runningPulseCount$next  = 15'h0000;
                endcase
            default:
                casez (edge_detect_output)
                  1'h1:
                      \runningPulseCount$next  = \$13 [14:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \runningPulseCount$next  = 15'h0000;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$12  = \$13 ;
  assign edge_detect_input = \input ;
endmodule

module tt_um_psychogenic_neptuneproportional(uo_out, uio_in, uio_out, uio_oe, ena, clk, rst_n, ui_in);
  wire \$1 ;
  input clk;
  wire clk;
  input ena;
  wire ena;
  wire input_pulses;
  input rst_n;
  wire rst_n;
  wire tuner_clk;
  wire [2:0] tuner_clock_config;
  wire [7:0] tuner_displaySegments;
  wire tuner_displaySelect;
  wire tuner_input_pulses;
  wire [7:0] tuner_pulseCount;
  wire tuner_rst;
  input [7:0] ui_in;
  wire [7:0] ui_in;
  input [7:0] uio_in;
  wire [7:0] uio_in;
  output [7:0] uio_oe;
  wire [7:0] uio_oe;
  output [7:0] uio_out;
  wire [7:0] uio_out;
  output [7:0] uo_out;
  wire [7:0] uo_out;
  assign \$1  = ~ rst_n;
  tuner tuner (
    .clk(tuner_clk),
    .clock_config(tuner_clock_config),
    .displaySegments(tuner_displaySegments),
    .displaySelect(tuner_displaySelect),
    .input_pulses(tuner_input_pulses),
    .pulseCount(tuner_pulseCount),
    .rst(tuner_rst)
  );
  assign uo_out = { tuner_displaySelect, tuner_displaySegments[7:1] };
  assign tuner_input_pulses = input_pulses;
  assign tuner_clock_config = ui_in[4:2];
  assign uio_out = tuner_pulseCount;
  assign input_pulses = ui_in[5];
  assign uio_oe = 8'hff;
  assign tuner_rst = \$1 ;
  assign tuner_clk = clk;
endmodule

module tuner(rst, pulseCount, clock_config, input_pulses, displaySegments, displaySelect, clk);
  input clk;
  wire clk;
  input [2:0] clock_config;
  wire [2:0] clock_config;
  wire [7:0] discriminator_edge_count;
  wire discriminator_match_exact;
  wire discriminator_match_far;
  wire discriminator_match_high;
  wire [3:0] discriminator_note;
  output [7:0] displaySegments;
  wire [7:0] displaySegments;
  output displaySelect;
  wire displaySelect;
  wire display_proximitySelect;
  wire [7:0] display_segments;
  wire [3:0] display_valueNote;
  wire [2:0] display_valueProxim;
  input input_pulses;
  wire input_pulses;
  output [7:0] pulseCount;
  wire [7:0] pulseCount;
  wire [2:0] pulsecounter_clock_config;
  wire pulsecounter_input;
  wire [14:0] pulsecounter_pulseCount;
  input rst;
  wire rst;
  discriminator discriminator (
    .clk(clk),
    .edge_count(discriminator_edge_count),
    .match_exact(discriminator_match_exact),
    .match_far(discriminator_match_far),
    .match_high(discriminator_match_high),
    .note(discriminator_note),
    .rst(rst)
  );
  display display (
    .clk(clk),
    .proximitySelect(display_proximitySelect),
    .rst(rst),
    .segments(display_segments),
    .valueNote(display_valueNote),
    .valueProxim(display_valueProxim)
  );
  pulsecounter pulsecounter (
    .clk(clk),
    .clock_config(pulsecounter_clock_config),
    .\input (pulsecounter_input),
    .pulseCount(pulsecounter_pulseCount),
    .rst(rst)
  );
  assign pulseCount = pulsecounter_pulseCount[7:0];
  assign displaySelect = display_proximitySelect;
  assign displaySegments = display_segments;
  assign display_valueProxim = { discriminator_match_far, discriminator_match_high, discriminator_match_exact };
  assign display_valueNote = discriminator_note;
  assign discriminator_edge_count = pulsecounter_pulseCount[7:0];
  assign pulsecounter_clock_config = clock_config;
  assign pulsecounter_input = input_pulses;
endmodule

